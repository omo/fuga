package langs

import (
	"fmt"
	base "github.com/omo/fuga/base"
	"os"
	"os/exec"
	"strings"
)

var _ = fmt.Printf

type GoGenerator struct{}

var goTemplate = TemplateMap{
	"foo.go": `// Generated by fuga
package main

import (
	"fmt"
)

var _ = fmt.Printf

func main() {
	fmt.Printf("Hello, World\n")
}
`}

func (*GoGenerator) Generate(writer base.ScratchWriter) error {
	goTemplate.WriteTo(writer, "foo.go")
	return nil
}

func runProgram(prog string, args []string, wd string) error {
	cmd := exec.Command(prog, args...)
	cmd.Dir = wd
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr
	cmd.Stdin = os.Stdin

	// FIXME: Prinly only in verbose mode
	fmt.Printf("Executing: %s %s\n", prog, strings.Join(args, " "))
	if err := cmd.Start(); err != nil {
		return err
	}

	return cmd.Wait()
}

type GoRunner struct{}

func (*GoRunner) Run(params base.ScratchRunnerParams) error {
	return runProgram("go", []string{"run", params.Unit.PrimaryBase()}, params.Unit.Dir())
}

type GoLanguage struct{}

func (*GoLanguage) MakeGenerator() base.StubGenerator {
	return &GoGenerator{}
}

func (*GoLanguage) MakeRunner() base.ScratchRunner {
	return &GoRunner{}
}

func init() {
	base.AddLanguage("go", &GoLanguage{})
}
