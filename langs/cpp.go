package langs

import (
	"flag"
	base "github.com/omo/fuga/base"
)

type CppGenerator struct {
	Suffix string
}

var cppTemplate = TemplateMap{
	"foo.cpp": `// Generated by fuga
#include <iostream>

int main(int argc, char* argv[]) {
  std::cout << "Hello, World!" << std::endl;
  return 0;
}
`,

	"Makefile": `#
CC={{.CompilerName}}
TARGET=./foo
SOURCE=./foo.{{.SourceSuffix}}

run : $(TARGET)
	$(TARGET)

clean :
	-rm $(TARGET)

$(TARGET) : $(SOURCE)
	$(CC) $^ -o $@

.PHONY : run clean
`,
	".gitignore": `
foo
*.o
*.obj
*.exe
`}

type cppOptions struct {
	CompilerName string
	SourceSuffix string
}

func (self *CppGenerator) Generate(writer base.StubWriter) error {
	sourceName := "foo." + self.Suffix
	cppTemplate.WriteTo(writer, sourceName)
	cppTemplate.WriteToWith(writer, "Makefile", cppOptions{CompilerName: *givenCppCommpiler, SourceSuffix: self.Suffix})
	cppTemplate.WriteTo(writer, ".gitignore")
	return nil
}

var givenCppCommpiler = flag.String("cpp-compiler", "gcc",
	"generate cpp: C++ compiler.")

type CppLanguage struct {
	Suffix string
}

func (self *CppLanguage) MakeGenerator() base.StubGenerator {
	return &CppGenerator{Suffix: self.Suffix}
}

func init() {
	cppTemplate["foo.cc"] = cppTemplate["foo.cpp"]

	base.AddLanguage("cpp", &CppLanguage{Suffix: "cpp"})
	base.AddLanguage("cc", &CppLanguage{Suffix: "cc"})
}
